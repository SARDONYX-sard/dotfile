[user]
name = SARDONYX-sard
email = 68905624+SARDONYX-sard@users.noreply.github.com
[core]
autocrlf = false
eol = lf
editor = code --wait
ignorecase = false
quotepath = false
safecrlf = true
[color]
ui = auto
[difftool "sourcetree"]
cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
cmd = "'' "
trustExitCode = true
[alias]
aa = add -A .
amend = commit --amend -m
apply = stash apply
b = branch
brd = branch -d
cm = commit
cm = commit -m
# co = checkout
cob = checkout -b
coo = !git fetch && git checkout
cp = cherry-pick
d = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /')  | cut -c 4- | xargs git diff --color=always $args --\" --multi --height 90% | cut -c 4-; }; f" # ファイル別にdiffを見る
db = git pull && git fetch --tags --prune && git branch --merged=$(git bn) | grep -vE 'develop|master|$(git bn)' | xargs git branch -d
difff = diff --word-diff # 行ごとの差分じゃなくて，単語レベルでの差分を色付きで表示する
ffs = flow feature start
fix = commit --fixup
fush = push -f
gr = log --graph --date=short --decorate=short --pretty=format:'%Cgreen%h %Creset%cd %Cblue%cn %Cred%d %Creset%s' # いい感じのグラフでログを表示
mg = merge --no-ff
pr = !"start \"$(git remote get-url origin | sed 's/\\/git\\//\\//;s/\\.git$/\\/compare\\//')$(git config gitflow.branch.develop | tr -d \\\\r\\\\n)...$(git rev-parse --abbrev-ref HEAD | tr -d \\\\r\\\\n)?expand=1\""
pu = !git push origin $(git branch --show-current)
rb = rebase
rba = rebase --abort
rbc = rebase --continue
rbs = rebase --skip
rl = reflog
rom = !git fetch && git rebase -i origin/master --autosquash
rv = revert
sa = !git sl | xargs git stash apply # ↑でプレビューした後にapply
save = stash push
sd = !git sl | xargs git stash drop # ↑でプレビューした後にdrop
sp = stash pop
ss = stash save
st = status
stl= git lfs status # Git LFSのステータスを確認
stt = status -uno   # Untracked filesを表示せず，not stagedと，stagedだけの状態を出力する
undo = reset HEAD~1
unstage = reset --soft HEAD^
alias = "!f() {\
    if [ \"$#\" -eq 0 ];then \
      git config --get-regexp ^alias\\.|cut -d"." -f2;\
      return;\
    fi;\
    ret=0;\
    for a in \"$@\";do \
      git config --get-regexp ^alias\\.\"$a\"$;\
      rettmp=$?;\
      if [ $rettmp != 0 ];then \
        ret=$rettmp;\
        printf \"\\e[31malias.$a is not defined as alias\\n\\e[m\";\
      fi;\
    done;\
    return $ret;\
  };f"
